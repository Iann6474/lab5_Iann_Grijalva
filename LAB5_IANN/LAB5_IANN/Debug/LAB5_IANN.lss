
LAB5_IANN.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000004  00800100  000004ce  00000562  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000004ce  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000012  00800104  00800104  00000566  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000566  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000598  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000088  00000000  00000000  000005d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000e6a  00000000  00000000  00000660  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000009c6  00000000  00000000  000014ca  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000784  00000000  00000000  00001e90  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000e0  00000000  00000000  00002614  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000050b  00000000  00000000  000026f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000004a5  00000000  00000000  00002bff  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000070  00000000  00000000  000030a4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 06 02 	jmp	0x40c	; 0x40c <__vector_7>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ee ec       	ldi	r30, 0xCE	; 206
  7c:	f4 e0       	ldi	r31, 0x04	; 4
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a4 30       	cpi	r26, 0x04	; 4
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a4 e0       	ldi	r26, 0x04	; 4
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a6 31       	cpi	r26, 0x16	; 22
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 53 00 	call	0xa6	; 0xa6 <main>
  9e:	0c 94 65 02 	jmp	0x4ca	; 0x4ca <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <main>:
int main(void) {
	// Variables
	uint8_t angulo_servo1, angulo_servo2, intensidad_led;
	
	// Inicializar servos
	iniciar_servos();
  a6:	0e 94 62 01 	call	0x2c4	; 0x2c4 <iniciar_servos>
	
	// Inicializar PWM del LED
	pwm_led_init();
  aa:	0e 94 af 01 	call	0x35e	; 0x35e <pwm_led_init>
	
	// Bucle principal
	while (1) {
		// Leer potenciómetros
		uint16_t valor_adc1 = leer_adc_filtrado(7);  // ADC7
  ae:	87 e0       	ldi	r24, 0x07	; 7
  b0:	0e 94 0c 01 	call	0x218	; 0x218 <leer_adc_filtrado>
  b4:	ec 01       	movw	r28, r24
		uint16_t valor_adc2 = leer_adc_filtrado(6);  // ADC6
  b6:	86 e0       	ldi	r24, 0x06	; 6
  b8:	0e 94 0c 01 	call	0x218	; 0x218 <leer_adc_filtrado>
  bc:	5c 01       	movw	r10, r24
		uint16_t valor_adc3 = leer_adc_filtrado(5);  // ADC5 
  be:	85 e0       	ldi	r24, 0x05	; 5
  c0:	0e 94 0c 01 	call	0x218	; 0x218 <leer_adc_filtrado>
  c4:	8c 01       	movw	r16, r24
		
		// Convertir a ángulos (0-180) e intensidad (0-100)
		angulo_servo1 = (uint8_t)((uint32_t)valor_adc1 * 180 / 1023);
  c6:	9e 01       	movw	r18, r28
  c8:	a4 eb       	ldi	r26, 0xB4	; 180
  ca:	b0 e0       	ldi	r27, 0x00	; 0
  cc:	0e 94 56 02 	call	0x4ac	; 0x4ac <__umulhisi3>
  d0:	0f 2e       	mov	r0, r31
  d2:	cc 24       	eor	r12, r12
  d4:	ca 94       	dec	r12
  d6:	f3 e0       	ldi	r31, 0x03	; 3
  d8:	df 2e       	mov	r13, r31
  da:	e1 2c       	mov	r14, r1
  dc:	f1 2c       	mov	r15, r1
  de:	f0 2d       	mov	r31, r0
  e0:	a7 01       	movw	r20, r14
  e2:	96 01       	movw	r18, r12
  e4:	0e 94 34 02 	call	0x468	; 0x468 <__udivmodsi4>
  e8:	d2 2f       	mov	r29, r18
		angulo_servo2 = (uint8_t)((uint32_t)valor_adc2 * 180 / 1023);
  ea:	95 01       	movw	r18, r10
  ec:	a4 eb       	ldi	r26, 0xB4	; 180
  ee:	b0 e0       	ldi	r27, 0x00	; 0
  f0:	0e 94 56 02 	call	0x4ac	; 0x4ac <__umulhisi3>
  f4:	a7 01       	movw	r20, r14
  f6:	96 01       	movw	r18, r12
  f8:	0e 94 34 02 	call	0x468	; 0x468 <__udivmodsi4>
  fc:	c2 2f       	mov	r28, r18
		intensidad_led = (uint8_t)((uint32_t)valor_adc3 * 100 / 1023);
  fe:	98 01       	movw	r18, r16
 100:	a4 e6       	ldi	r26, 0x64	; 100
 102:	b0 e0       	ldi	r27, 0x00	; 0
 104:	0e 94 56 02 	call	0x4ac	; 0x4ac <__umulhisi3>
 108:	a7 01       	movw	r20, r14
 10a:	96 01       	movw	r18, r12
 10c:	0e 94 34 02 	call	0x468	; 0x468 <__udivmodsi4>
 110:	f2 2e       	mov	r15, r18
		
		// Actualizar servos
		establecer_angulo_servo1(angulo_servo1);
 112:	8d 2f       	mov	r24, r29
 114:	0e 94 9c 00 	call	0x138	; 0x138 <establecer_angulo_servo1>
		establecer_angulo_servo2(angulo_servo2);
 118:	8c 2f       	mov	r24, r28
 11a:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <establecer_angulo_servo2>
		
		// Actualizar LED
		pwm_led_set_intensity(intensidad_led);
 11e:	8f 2d       	mov	r24, r15
 120:	0e 94 a4 01 	call	0x348	; 0x348 <pwm_led_set_intensity>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 124:	2f ef       	ldi	r18, 0xFF	; 255
 126:	89 ef       	ldi	r24, 0xF9	; 249
 128:	90 e0       	ldi	r25, 0x00	; 0
 12a:	21 50       	subi	r18, 0x01	; 1
 12c:	80 40       	sbci	r24, 0x00	; 0
 12e:	90 40       	sbci	r25, 0x00	; 0
 130:	e1 f7       	brne	.-8      	; 0x12a <main+0x84>
 132:	00 c0       	rjmp	.+0      	; 0x134 <main+0x8e>
 134:	00 00       	nop
 136:	bb cf       	rjmp	.-138    	; 0xae <main+0x8>

00000138 <establecer_angulo_servo1>:
    }
}

void establecer_angulo_servo1(uint8_t angulo) {
    // limitar ángulo a 0-180
    if (angulo > 180) 
 138:	85 3b       	cpi	r24, 0xB5	; 181
 13a:	08 f0       	brcs	.+2      	; 0x13e <establecer_angulo_servo1+0x6>
        angulo = 180;
 13c:	84 eb       	ldi	r24, 0xB4	; 180
    
    // convertir ángulo a ancho de pulso (mapeo lineal)
    uint16_t objetivo = SERVO_MIN_PULSO + ((uint32_t)(SERVO_MAX_PULSO - SERVO_MIN_PULSO) * angulo / 180);
 13e:	28 2f       	mov	r18, r24
 140:	30 e0       	ldi	r19, 0x00	; 0
 142:	a0 ea       	ldi	r26, 0xA0	; 160
 144:	bf e0       	ldi	r27, 0x0F	; 15
 146:	0e 94 56 02 	call	0x4ac	; 0x4ac <__umulhisi3>
 14a:	24 eb       	ldi	r18, 0xB4	; 180
 14c:	30 e0       	ldi	r19, 0x00	; 0
 14e:	40 e0       	ldi	r20, 0x00	; 0
 150:	50 e0       	ldi	r21, 0x00	; 0
 152:	0e 94 34 02 	call	0x468	; 0x468 <__udivmodsi4>
 156:	28 51       	subi	r18, 0x18	; 24
 158:	3c 4f       	sbci	r19, 0xFC	; 252
    
    // suavizado para movimientos más fluidos
    valor_servo1_actual = (valor_servo1_actual * 7 + objetivo * 3) / 10;
 15a:	40 91 02 01 	lds	r20, 0x0102	; 0x800102 <valor_servo1_actual>
 15e:	50 91 03 01 	lds	r21, 0x0103	; 0x800103 <valor_servo1_actual+0x1>
 162:	ca 01       	movw	r24, r20
 164:	88 0f       	add	r24, r24
 166:	99 1f       	adc	r25, r25
 168:	88 0f       	add	r24, r24
 16a:	99 1f       	adc	r25, r25
 16c:	88 0f       	add	r24, r24
 16e:	99 1f       	adc	r25, r25
 170:	84 1b       	sub	r24, r20
 172:	95 0b       	sbc	r25, r21
 174:	a9 01       	movw	r20, r18
 176:	44 0f       	add	r20, r20
 178:	55 1f       	adc	r21, r21
 17a:	24 0f       	add	r18, r20
 17c:	35 1f       	adc	r19, r21
 17e:	28 0f       	add	r18, r24
 180:	39 1f       	adc	r19, r25
 182:	ad ec       	ldi	r26, 0xCD	; 205
 184:	bc ec       	ldi	r27, 0xCC	; 204
 186:	0e 94 56 02 	call	0x4ac	; 0x4ac <__umulhisi3>
 18a:	96 95       	lsr	r25
 18c:	87 95       	ror	r24
 18e:	96 95       	lsr	r25
 190:	87 95       	ror	r24
 192:	96 95       	lsr	r25
 194:	87 95       	ror	r24
 196:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <valor_servo1_actual+0x1>
 19a:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <valor_servo1_actual>
    
    // actualizar registro de comparación
    OCR1A = valor_servo1_actual;
 19e:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 1a2:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
 1a6:	08 95       	ret

000001a8 <establecer_angulo_servo2>:
}

void establecer_angulo_servo2(uint8_t angulo) {
    // limitar ángulo a 0-180
    if (angulo > 180) 
 1a8:	85 3b       	cpi	r24, 0xB5	; 181
 1aa:	08 f0       	brcs	.+2      	; 0x1ae <establecer_angulo_servo2+0x6>
        angulo = 180;
 1ac:	84 eb       	ldi	r24, 0xB4	; 180
    
    // convertir ángulo a ancho de pulso (mapeo lineal)
    uint16_t objetivo = SERVO_MIN_PULSO + ((uint32_t)(SERVO_MAX_PULSO - SERVO_MIN_PULSO) * angulo / 180);
 1ae:	28 2f       	mov	r18, r24
 1b0:	30 e0       	ldi	r19, 0x00	; 0
 1b2:	a0 ea       	ldi	r26, 0xA0	; 160
 1b4:	bf e0       	ldi	r27, 0x0F	; 15
 1b6:	0e 94 56 02 	call	0x4ac	; 0x4ac <__umulhisi3>
 1ba:	24 eb       	ldi	r18, 0xB4	; 180
 1bc:	30 e0       	ldi	r19, 0x00	; 0
 1be:	40 e0       	ldi	r20, 0x00	; 0
 1c0:	50 e0       	ldi	r21, 0x00	; 0
 1c2:	0e 94 34 02 	call	0x468	; 0x468 <__udivmodsi4>
 1c6:	28 51       	subi	r18, 0x18	; 24
 1c8:	3c 4f       	sbci	r19, 0xFC	; 252
    
    // suavizado para movimientos más fluidos
    valor_servo2_actual = (valor_servo2_actual * 7 + objetivo * 3) / 10;
 1ca:	40 91 00 01 	lds	r20, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 1ce:	50 91 01 01 	lds	r21, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 1d2:	ca 01       	movw	r24, r20
 1d4:	88 0f       	add	r24, r24
 1d6:	99 1f       	adc	r25, r25
 1d8:	88 0f       	add	r24, r24
 1da:	99 1f       	adc	r25, r25
 1dc:	88 0f       	add	r24, r24
 1de:	99 1f       	adc	r25, r25
 1e0:	84 1b       	sub	r24, r20
 1e2:	95 0b       	sbc	r25, r21
 1e4:	a9 01       	movw	r20, r18
 1e6:	44 0f       	add	r20, r20
 1e8:	55 1f       	adc	r21, r21
 1ea:	24 0f       	add	r18, r20
 1ec:	35 1f       	adc	r19, r21
 1ee:	28 0f       	add	r18, r24
 1f0:	39 1f       	adc	r19, r25
 1f2:	ad ec       	ldi	r26, 0xCD	; 205
 1f4:	bc ec       	ldi	r27, 0xCC	; 204
 1f6:	0e 94 56 02 	call	0x4ac	; 0x4ac <__umulhisi3>
 1fa:	96 95       	lsr	r25
 1fc:	87 95       	ror	r24
 1fe:	96 95       	lsr	r25
 200:	87 95       	ror	r24
 202:	96 95       	lsr	r25
 204:	87 95       	ror	r24
 206:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 20a:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
    
    // actualizar registro de comparación
    OCR1B = valor_servo2_actual;
 20e:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__TEXT_REGION_LENGTH__+0x7f808b>
 212:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7f808a>
 216:	08 95       	ret

00000218 <leer_adc_filtrado>:
uint16_t leer_adc_filtrado(uint8_t canal) {
    static uint16_t valores_anteriores[8] = {0};  // para los 8 canales posibles
    
    // leer con promedio
    uint32_t suma = 0;
    for (uint8_t i = 0; i < NUM_MUESTRAS; i++) {
 218:	30 e0       	ldi	r19, 0x00	; 0

uint16_t leer_adc_filtrado(uint8_t canal) {
    static uint16_t valores_anteriores[8] = {0};  // para los 8 canales posibles
    
    // leer con promedio
    uint32_t suma = 0;
 21a:	40 e0       	ldi	r20, 0x00	; 0
 21c:	50 e0       	ldi	r21, 0x00	; 0
 21e:	ba 01       	movw	r22, r20
    for (uint8_t i = 0; i < NUM_MUESTRAS; i++) {
 220:	24 c0       	rjmp	.+72     	; 0x26a <leer_adc_filtrado+0x52>
        // seleccionar canal (0-7)
        ADMUX = (ADMUX & 0xF8) | (canal & 0x07);
 222:	ec e7       	ldi	r30, 0x7C	; 124
 224:	f0 e0       	ldi	r31, 0x00	; 0
 226:	90 81       	ld	r25, Z
 228:	98 7f       	andi	r25, 0xF8	; 248
 22a:	28 2f       	mov	r18, r24
 22c:	27 70       	andi	r18, 0x07	; 7
 22e:	92 2b       	or	r25, r18
 230:	90 83       	st	Z, r25
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 232:	95 e3       	ldi	r25, 0x35	; 53
 234:	9a 95       	dec	r25
 236:	f1 f7       	brne	.-4      	; 0x234 <leer_adc_filtrado+0x1c>
 238:	00 00       	nop
        _delay_us(10);  // estabilizar multiplexor
        
        // iniciar conversión
        ADCSRA |= (1 << ADSC);
 23a:	ea e7       	ldi	r30, 0x7A	; 122
 23c:	f0 e0       	ldi	r31, 0x00	; 0
 23e:	90 81       	ld	r25, Z
 240:	90 64       	ori	r25, 0x40	; 64
 242:	90 83       	st	Z, r25
        while (ADCSRA & (1 << ADSC));  // esperar a que termine
 244:	90 91 7a 00 	lds	r25, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
 248:	96 fd       	sbrc	r25, 6
 24a:	fc cf       	rjmp	.-8      	; 0x244 <leer_adc_filtrado+0x2c>
        
        // acumular
        suma += ADC;
 24c:	e0 91 78 00 	lds	r30, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
 250:	f0 91 79 00 	lds	r31, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
 254:	4e 0f       	add	r20, r30
 256:	5f 1f       	adc	r21, r31
 258:	61 1d       	adc	r22, r1
 25a:	71 1d       	adc	r23, r1
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 25c:	ef e9       	ldi	r30, 0x9F	; 159
 25e:	ff e0       	ldi	r31, 0x0F	; 15
 260:	31 97       	sbiw	r30, 0x01	; 1
 262:	f1 f7       	brne	.-4      	; 0x260 <leer_adc_filtrado+0x48>
 264:	00 c0       	rjmp	.+0      	; 0x266 <leer_adc_filtrado+0x4e>
 266:	00 00       	nop
uint16_t leer_adc_filtrado(uint8_t canal) {
    static uint16_t valores_anteriores[8] = {0};  // para los 8 canales posibles
    
    // leer con promedio
    uint32_t suma = 0;
    for (uint8_t i = 0; i < NUM_MUESTRAS; i++) {
 268:	3f 5f       	subi	r19, 0xFF	; 255
 26a:	38 30       	cpi	r19, 0x08	; 8
 26c:	d0 f2       	brcs	.-76     	; 0x222 <leer_adc_filtrado+0xa>
        suma += ADC;
        _delay_ms(1);
    }
    
    // calcular promedio
    uint16_t valor_actual = suma / NUM_MUESTRAS;
 26e:	68 94       	set
 270:	12 f8       	bld	r1, 2
 272:	76 95       	lsr	r23
 274:	67 95       	ror	r22
 276:	57 95       	ror	r21
 278:	47 95       	ror	r20
 27a:	16 94       	lsr	r1
 27c:	d1 f7       	brne	.-12     	; 0x272 <leer_adc_filtrado+0x5a>
    
    // solo actualizar si hay cambio significativo
    if (valor_absoluto((int16_t)valor_actual - (int16_t)valores_anteriores[canal]) > UMBRAL_CAMBIO) {
 27e:	90 e0       	ldi	r25, 0x00	; 0
 280:	fc 01       	movw	r30, r24
 282:	ee 0f       	add	r30, r30
 284:	ff 1f       	adc	r31, r31
 286:	ec 5f       	subi	r30, 0xFC	; 252
 288:	fe 4f       	sbci	r31, 0xFE	; 254
 28a:	20 81       	ld	r18, Z
 28c:	31 81       	ldd	r19, Z+1	; 0x01
 28e:	fa 01       	movw	r30, r20
 290:	e2 1b       	sub	r30, r18
 292:	f3 0b       	sbc	r31, r19
#include <util/delay.h>
#include <avr/interrupt.h>

// función interna para calcular valor absoluto
static inline int16_t valor_absoluto(int16_t valor) {
    return valor < 0 ? -valor : valor;
 294:	9f 01       	movw	r18, r30
 296:	22 f4       	brpl	.+8      	; 0x2a0 <leer_adc_filtrado+0x88>
 298:	22 27       	eor	r18, r18
 29a:	33 27       	eor	r19, r19
 29c:	2e 1b       	sub	r18, r30
 29e:	3f 0b       	sbc	r19, r31
    
    // calcular promedio
    uint16_t valor_actual = suma / NUM_MUESTRAS;
    
    // solo actualizar si hay cambio significativo
    if (valor_absoluto((int16_t)valor_actual - (int16_t)valores_anteriores[canal]) > UMBRAL_CAMBIO) {
 2a0:	29 30       	cpi	r18, 0x09	; 9
 2a2:	31 05       	cpc	r19, r1
 2a4:	3c f0       	brlt	.+14     	; 0x2b4 <leer_adc_filtrado+0x9c>
        valores_anteriores[canal] = valor_actual;
 2a6:	fc 01       	movw	r30, r24
 2a8:	ee 0f       	add	r30, r30
 2aa:	ff 1f       	adc	r31, r31
 2ac:	ec 5f       	subi	r30, 0xFC	; 252
 2ae:	fe 4f       	sbci	r31, 0xFE	; 254
 2b0:	51 83       	std	Z+1, r21	; 0x01
 2b2:	40 83       	st	Z, r20
    }
    
    // retornar valor filtrado
    return valores_anteriores[canal];
 2b4:	88 0f       	add	r24, r24
 2b6:	99 1f       	adc	r25, r25
 2b8:	fc 01       	movw	r30, r24
 2ba:	ec 5f       	subi	r30, 0xFC	; 252
 2bc:	fe 4f       	sbci	r31, 0xFE	; 254
 2be:	80 81       	ld	r24, Z
 2c0:	91 81       	ldd	r25, Z+1	; 0x01
 2c2:	08 95       	ret

000002c4 <iniciar_servos>:

// valores actuales de los servos para suavizado
static uint16_t valor_servo1_actual = 3000;  // centro
static uint16_t valor_servo2_actual = 3000;  // centro

void iniciar_servos(void) {
 2c4:	cf 93       	push	r28
    // inicializar ADC
    ADMUX = (1 << REFS0);  // referencia = AVCC
 2c6:	80 e4       	ldi	r24, 0x40	; 64
 2c8:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
    ADCSRA = (1 << ADEN) | (1 << ADPS2) | (1 << ADPS1) | (1 << ADPS0);  // habilitar ADC, prescaler 128
 2cc:	87 e8       	ldi	r24, 0x87	; 135
 2ce:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
    
    // configurar pines de los servos como salidas
    DDRB |= (1 << PB1) | (1 << PB2);  // OC1A (PB1/D9) y OC1B (PB2/D10)
 2d2:	84 b1       	in	r24, 0x04	; 4
 2d4:	86 60       	ori	r24, 0x06	; 6
 2d6:	84 b9       	out	0x04, r24	; 4
    
    // configurar Timer1 para ambos canales PWM
    // modo 14: Fast PWM con TOP = ICR1
    TCCR1A = (1 << COM1A1) | (1 << COM1B1) | (1 << WGM11);  // PWM no invertido en ambos canales
 2d8:	82 ea       	ldi	r24, 0xA2	; 162
 2da:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
    TCCR1B = (1 << WGM13) | (1 << WGM12) | (1 << CS11);     // Modo 14, prescaler = 8
 2de:	8a e1       	ldi	r24, 0x1A	; 26
 2e0:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
    
    // período de 20ms (50Hz)
    ICR1 = 39999;  // (16MHz/8)/50Hz - 1
 2e4:	8f e3       	ldi	r24, 0x3F	; 63
 2e6:	9c e9       	ldi	r25, 0x9C	; 156
 2e8:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7f8087>
 2ec:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7f8086>
    
    // posición inicial: centro (90 grados)
    OCR1A = valor_servo1_actual;  // servo 1
 2f0:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <valor_servo1_actual>
 2f4:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <valor_servo1_actual+0x1>
 2f8:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 2fc:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
    OCR1B = valor_servo2_actual;  // servo 2
 300:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 304:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 308:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__TEXT_REGION_LENGTH__+0x7f808b>
 30c:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7f808a>
 310:	2f ef       	ldi	r18, 0xFF	; 255
 312:	89 e6       	ldi	r24, 0x69	; 105
 314:	98 e1       	ldi	r25, 0x18	; 24
 316:	21 50       	subi	r18, 0x01	; 1
 318:	80 40       	sbci	r24, 0x00	; 0
 31a:	90 40       	sbci	r25, 0x00	; 0
 31c:	e1 f7       	brne	.-8      	; 0x316 <iniciar_servos+0x52>
 31e:	00 c0       	rjmp	.+0      	; 0x320 <iniciar_servos+0x5c>
 320:	00 00       	nop
    
    // estabilización inicial
    _delay_ms(500);
    
    // leer ADC varias veces para estabilizarlo
    for (uint8_t i = 0; i < 8; i++) {
 322:	c0 e0       	ldi	r28, 0x00	; 0
 324:	0d c0       	rjmp	.+26     	; 0x340 <iniciar_servos+0x7c>
        leer_adc_filtrado(0);
 326:	80 e0       	ldi	r24, 0x00	; 0
 328:	0e 94 0c 01 	call	0x218	; 0x218 <leer_adc_filtrado>
        leer_adc_filtrado(1);
 32c:	81 e0       	ldi	r24, 0x01	; 1
 32e:	0e 94 0c 01 	call	0x218	; 0x218 <leer_adc_filtrado>
 332:	8f e1       	ldi	r24, 0x1F	; 31
 334:	9e e4       	ldi	r25, 0x4E	; 78
 336:	01 97       	sbiw	r24, 0x01	; 1
 338:	f1 f7       	brne	.-4      	; 0x336 <iniciar_servos+0x72>
 33a:	00 c0       	rjmp	.+0      	; 0x33c <iniciar_servos+0x78>
 33c:	00 00       	nop
    
    // estabilización inicial
    _delay_ms(500);
    
    // leer ADC varias veces para estabilizarlo
    for (uint8_t i = 0; i < 8; i++) {
 33e:	cf 5f       	subi	r28, 0xFF	; 255
 340:	c8 30       	cpi	r28, 0x08	; 8
 342:	88 f3       	brcs	.-30     	; 0x326 <iniciar_servos+0x62>
        leer_adc_filtrado(0);
        leer_adc_filtrado(1);
        _delay_ms(5);
    }
}
 344:	cf 91       	pop	r28
 346:	08 95       	ret

00000348 <pwm_led_set_intensity>:
}


void pwm_led_set_intensity(uint8_t intensity) {
    
    if(intensity > 100) intensity = 100;
 348:	85 36       	cpi	r24, 0x65	; 101
 34a:	08 f0       	brcs	.+2      	; 0x34e <pwm_led_set_intensity+0x6>
 34c:	84 e6       	ldi	r24, 0x64	; 100
    
    // Actualizar ciclo de trabajo
    led_duty_cycle = intensity;
 34e:	80 93 15 01 	sts	0x0115, r24	; 0x800115 <led_duty_cycle>
    
    // Caso especial para asegurar apagado completo
    if(intensity == 0) {
 352:	81 11       	cpse	r24, r1
 354:	03 c0       	rjmp	.+6      	; 0x35c <pwm_led_set_intensity+0x14>
        // Desactivar directamente el LED sin PWM
        LED_PORT &= ~(1 << LED_PIN);
 356:	85 b1       	in	r24, 0x05	; 5
 358:	8e 7f       	andi	r24, 0xFE	; 254
 35a:	85 b9       	out	0x05, r24	; 5
 35c:	08 95       	ret

0000035e <pwm_led_init>:
// Variables globales
volatile uint8_t led_duty_cycle = 0;    // ciclo de trabajo del LED 
volatile uint8_t timer_counter = 0;     // contador para el timer

// Inicializa el LED y el timer
void pwm_led_init(void) {
 35e:	cf 93       	push	r28
    // Configurar pin del LED como salida
    LED_DDR |= (1 << LED_PIN);
 360:	84 b1       	in	r24, 0x04	; 4
 362:	81 60       	ori	r24, 0x01	; 1
 364:	84 b9       	out	0x04, r24	; 4
    
    // Apagar LED inicialmente
    LED_PORT &= ~(1 << LED_PIN);
 366:	85 b1       	in	r24, 0x05	; 5
 368:	8e 7f       	andi	r24, 0xFE	; 254
 36a:	85 b9       	out	0x05, r24	; 5
    
    // Configurar Timer2 para interrupciones 
    TCCR2A = 0;
 36c:	a0 eb       	ldi	r26, 0xB0	; 176
 36e:	b0 e0       	ldi	r27, 0x00	; 0
 370:	1c 92       	st	X, r1
    TCCR2B = 0;
 372:	e1 eb       	ldi	r30, 0xB1	; 177
 374:	f0 e0       	ldi	r31, 0x00	; 0
 376:	10 82       	st	Z, r1
    TCNT2 = 0;
 378:	10 92 b2 00 	sts	0x00B2, r1	; 0x8000b2 <__TEXT_REGION_LENGTH__+0x7f80b2>
    
    // Modo CTC, prescaler = 8 
    TCCR2A |= (1 << WGM21);
 37c:	8c 91       	ld	r24, X
 37e:	82 60       	ori	r24, 0x02	; 2
 380:	8c 93       	st	X, r24
    TCCR2B |= (1 << CS21);
 382:	80 81       	ld	r24, Z
 384:	82 60       	ori	r24, 0x02	; 2
 386:	80 83       	st	Z, r24
    
    // Valor de comparación más bajo = interrupciones más frecuentes
    OCR2A = 49;  // ~40kHz de frecuencia PWM
 388:	81 e3       	ldi	r24, 0x31	; 49
 38a:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
    
    // Habilitar interrupción por comparación
    TIMSK2 |= (1 << OCIE2A);
 38e:	e0 e7       	ldi	r30, 0x70	; 112
 390:	f0 e0       	ldi	r31, 0x00	; 0
 392:	80 81       	ld	r24, Z
 394:	82 60       	ori	r24, 0x02	; 2
 396:	80 83       	st	Z, r24
    
    // Habilitar interrupciones globales
    sei();
 398:	78 94       	sei
    
    // encender gradualmente
    for(uint8_t i = 0; i <= 100; i++) {
 39a:	c0 e0       	ldi	r28, 0x00	; 0
 39c:	0d c0       	rjmp	.+26     	; 0x3b8 <pwm_led_init+0x5a>
        pwm_led_set_intensity(i);
 39e:	8c 2f       	mov	r24, r28
 3a0:	0e 94 a4 01 	call	0x348	; 0x348 <pwm_led_set_intensity>
 3a4:	2f ef       	ldi	r18, 0xFF	; 255
 3a6:	89 ef       	ldi	r24, 0xF9	; 249
 3a8:	90 e0       	ldi	r25, 0x00	; 0
 3aa:	21 50       	subi	r18, 0x01	; 1
 3ac:	80 40       	sbci	r24, 0x00	; 0
 3ae:	90 40       	sbci	r25, 0x00	; 0
 3b0:	e1 f7       	brne	.-8      	; 0x3aa <pwm_led_init+0x4c>
 3b2:	00 c0       	rjmp	.+0      	; 0x3b4 <pwm_led_init+0x56>
 3b4:	00 00       	nop
    
    // Habilitar interrupciones globales
    sei();
    
    // encender gradualmente
    for(uint8_t i = 0; i <= 100; i++) {
 3b6:	cf 5f       	subi	r28, 0xFF	; 255
 3b8:	c5 36       	cpi	r28, 0x65	; 101
 3ba:	88 f3       	brcs	.-30     	; 0x39e <pwm_led_init+0x40>
 3bc:	2f ef       	ldi	r18, 0xFF	; 255
 3be:	89 e6       	ldi	r24, 0x69	; 105
 3c0:	98 e1       	ldi	r25, 0x18	; 24
 3c2:	21 50       	subi	r18, 0x01	; 1
 3c4:	80 40       	sbci	r24, 0x00	; 0
 3c6:	90 40       	sbci	r25, 0x00	; 0
 3c8:	e1 f7       	brne	.-8      	; 0x3c2 <pwm_led_init+0x64>
 3ca:	00 c0       	rjmp	.+0      	; 0x3cc <pwm_led_init+0x6e>
 3cc:	00 00       	nop
    
    // Mantener en máximo brillo 
    _delay_ms(500);
    
    // Apagar gradualmente
    for(uint8_t i = 100; i > 0; i--) {
 3ce:	c4 e6       	ldi	r28, 0x64	; 100
 3d0:	0d c0       	rjmp	.+26     	; 0x3ec <pwm_led_init+0x8e>
        pwm_led_set_intensity(i);
 3d2:	8c 2f       	mov	r24, r28
 3d4:	0e 94 a4 01 	call	0x348	; 0x348 <pwm_led_set_intensity>
 3d8:	2f ef       	ldi	r18, 0xFF	; 255
 3da:	89 ef       	ldi	r24, 0xF9	; 249
 3dc:	90 e0       	ldi	r25, 0x00	; 0
 3de:	21 50       	subi	r18, 0x01	; 1
 3e0:	80 40       	sbci	r24, 0x00	; 0
 3e2:	90 40       	sbci	r25, 0x00	; 0
 3e4:	e1 f7       	brne	.-8      	; 0x3de <pwm_led_init+0x80>
 3e6:	00 c0       	rjmp	.+0      	; 0x3e8 <pwm_led_init+0x8a>
 3e8:	00 00       	nop
    
    // Mantener en máximo brillo 
    _delay_ms(500);
    
    // Apagar gradualmente
    for(uint8_t i = 100; i > 0; i--) {
 3ea:	c1 50       	subi	r28, 0x01	; 1
 3ec:	c1 11       	cpse	r28, r1
 3ee:	f1 cf       	rjmp	.-30     	; 0x3d2 <pwm_led_init+0x74>
        pwm_led_set_intensity(i);
        _delay_ms(20);
    }
    
    // Asegurar que el LED esté completamente apagado
    pwm_led_set_intensity(0);
 3f0:	80 e0       	ldi	r24, 0x00	; 0
 3f2:	0e 94 a4 01 	call	0x348	; 0x348 <pwm_led_set_intensity>
 3f6:	2f ef       	ldi	r18, 0xFF	; 255
 3f8:	89 e6       	ldi	r24, 0x69	; 105
 3fa:	98 e1       	ldi	r25, 0x18	; 24
 3fc:	21 50       	subi	r18, 0x01	; 1
 3fe:	80 40       	sbci	r24, 0x00	; 0
 400:	90 40       	sbci	r25, 0x00	; 0
 402:	e1 f7       	brne	.-8      	; 0x3fc <pwm_led_init+0x9e>
 404:	00 c0       	rjmp	.+0      	; 0x406 <__EEPROM_REGION_LENGTH__+0x6>
 406:	00 00       	nop
    _delay_ms(500);
}
 408:	cf 91       	pop	r28
 40a:	08 95       	ret

0000040c <__vector_7>:
        LED_PORT &= ~(1 << LED_PIN);
    }
}

// Rutina de interrupción del Timer2
ISR(TIMER2_COMPA_vect) {
 40c:	1f 92       	push	r1
 40e:	0f 92       	push	r0
 410:	0f b6       	in	r0, 0x3f	; 63
 412:	0f 92       	push	r0
 414:	11 24       	eor	r1, r1
 416:	8f 93       	push	r24
 418:	9f 93       	push	r25
    // Si intensidad es 0, mantenemos el LED apagado
    if(led_duty_cycle == 0) {
 41a:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <led_duty_cycle>
 41e:	81 11       	cpse	r24, r1
 420:	04 c0       	rjmp	.+8      	; 0x42a <__vector_7+0x1e>
        LED_PORT &= ~(1 << LED_PIN);
 422:	85 b1       	in	r24, 0x05	; 5
 424:	8e 7f       	andi	r24, 0xFE	; 254
 426:	85 b9       	out	0x05, r24	; 5
        return;
 428:	18 c0       	rjmp	.+48     	; 0x45a <__vector_7+0x4e>
    }
    
    // Incrementar contador
    timer_counter++;
 42a:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <timer_counter>
 42e:	8f 5f       	subi	r24, 0xFF	; 255
 430:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <timer_counter>
    
    // Un ciclo completo cada 100 interrupciones
    if(timer_counter >= 100) {
 434:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <timer_counter>
 438:	84 36       	cpi	r24, 0x64	; 100
 43a:	10 f0       	brcs	.+4      	; 0x440 <__vector_7+0x34>
        timer_counter = 0;
 43c:	10 92 14 01 	sts	0x0114, r1	; 0x800114 <timer_counter>
    }
    
    // PWM manual: si contador < ciclo de trabajo, LED encendido
    if(timer_counter < led_duty_cycle) {
 440:	90 91 14 01 	lds	r25, 0x0114	; 0x800114 <timer_counter>
 444:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <led_duty_cycle>
 448:	98 17       	cp	r25, r24
 44a:	20 f4       	brcc	.+8      	; 0x454 <__vector_7+0x48>
        LED_PORT |= (1 << LED_PIN);
 44c:	85 b1       	in	r24, 0x05	; 5
 44e:	81 60       	ori	r24, 0x01	; 1
 450:	85 b9       	out	0x05, r24	; 5
 452:	03 c0       	rjmp	.+6      	; 0x45a <__vector_7+0x4e>
    } else {
        LED_PORT &= ~(1 << LED_PIN);
 454:	85 b1       	in	r24, 0x05	; 5
 456:	8e 7f       	andi	r24, 0xFE	; 254
 458:	85 b9       	out	0x05, r24	; 5
    }
 45a:	9f 91       	pop	r25
 45c:	8f 91       	pop	r24
 45e:	0f 90       	pop	r0
 460:	0f be       	out	0x3f, r0	; 63
 462:	0f 90       	pop	r0
 464:	1f 90       	pop	r1
 466:	18 95       	reti

00000468 <__udivmodsi4>:
 468:	a1 e2       	ldi	r26, 0x21	; 33
 46a:	1a 2e       	mov	r1, r26
 46c:	aa 1b       	sub	r26, r26
 46e:	bb 1b       	sub	r27, r27
 470:	fd 01       	movw	r30, r26
 472:	0d c0       	rjmp	.+26     	; 0x48e <__udivmodsi4_ep>

00000474 <__udivmodsi4_loop>:
 474:	aa 1f       	adc	r26, r26
 476:	bb 1f       	adc	r27, r27
 478:	ee 1f       	adc	r30, r30
 47a:	ff 1f       	adc	r31, r31
 47c:	a2 17       	cp	r26, r18
 47e:	b3 07       	cpc	r27, r19
 480:	e4 07       	cpc	r30, r20
 482:	f5 07       	cpc	r31, r21
 484:	20 f0       	brcs	.+8      	; 0x48e <__udivmodsi4_ep>
 486:	a2 1b       	sub	r26, r18
 488:	b3 0b       	sbc	r27, r19
 48a:	e4 0b       	sbc	r30, r20
 48c:	f5 0b       	sbc	r31, r21

0000048e <__udivmodsi4_ep>:
 48e:	66 1f       	adc	r22, r22
 490:	77 1f       	adc	r23, r23
 492:	88 1f       	adc	r24, r24
 494:	99 1f       	adc	r25, r25
 496:	1a 94       	dec	r1
 498:	69 f7       	brne	.-38     	; 0x474 <__udivmodsi4_loop>
 49a:	60 95       	com	r22
 49c:	70 95       	com	r23
 49e:	80 95       	com	r24
 4a0:	90 95       	com	r25
 4a2:	9b 01       	movw	r18, r22
 4a4:	ac 01       	movw	r20, r24
 4a6:	bd 01       	movw	r22, r26
 4a8:	cf 01       	movw	r24, r30
 4aa:	08 95       	ret

000004ac <__umulhisi3>:
 4ac:	a2 9f       	mul	r26, r18
 4ae:	b0 01       	movw	r22, r0
 4b0:	b3 9f       	mul	r27, r19
 4b2:	c0 01       	movw	r24, r0
 4b4:	a3 9f       	mul	r26, r19
 4b6:	70 0d       	add	r23, r0
 4b8:	81 1d       	adc	r24, r1
 4ba:	11 24       	eor	r1, r1
 4bc:	91 1d       	adc	r25, r1
 4be:	b2 9f       	mul	r27, r18
 4c0:	70 0d       	add	r23, r0
 4c2:	81 1d       	adc	r24, r1
 4c4:	11 24       	eor	r1, r1
 4c6:	91 1d       	adc	r25, r1
 4c8:	08 95       	ret

000004ca <_exit>:
 4ca:	f8 94       	cli

000004cc <__stop_program>:
 4cc:	ff cf       	rjmp	.-2      	; 0x4cc <__stop_program>
